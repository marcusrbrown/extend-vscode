name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        node-version: [12]

    env:
      NODE_VERSION: ${{ matrix.node-version }}

    steps:
      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@270253e841af726300e85d718a5f606959b2903c # renovate: tag=v2.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure
        shell: bash
        run: |
          git config --global core.autocrlf false
          npm config set scripts-prepend-node-path true
          echo "Node $(node --version)"
          echo "Yarn $(yarn --version)"

      - name: Checkout
        uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97 # renovate: tag=v2.3.5

      - name: Get Yarn cache
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Use Yarn cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # renovate: tag=v2.1.6
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            **/.eslintcache
            **/node_modules
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-yarn-

      - name: Clear Yarn cache
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf .eslintcache
          rm -rf node_modules
          yarn cache clean

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests
        run: yarn test
